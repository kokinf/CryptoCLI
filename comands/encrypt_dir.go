package comands

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"

	"CruptoCLI/modules"
)

func EncryptDirCommand(root, output string, masterKey []byte, verbose bool) error {
	logVerbose(verbose, "üìÅ –ù–∞—á–∏–Ω–∞—é —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞: %s ‚Üí %s", root, output)

	err := os.MkdirAll(output, 0755)
	if err != nil {
		return fmt.Errorf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}

	filesProcessed := 0
	totalSize := int64(0)

	err = filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() {
			return nil
		}

		rel, _ := filepath.Rel(root, path)
		outPath := filepath.Join(output, rel+".enc")

		logVerbose(verbose, "üìÑ –ó–∞—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è: %s", path)
		data, err := ioutil.ReadFile(path)
		if err != nil {
			return fmt.Errorf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª %s: %v", path, err)
		}

		encrypted, err := modules.MultiLayerEncrypt(data, masterKey)
		if err != nil {
			return fmt.Errorf("‚ùå –æ—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v", path, err)
		}

		err = os.MkdirAll(filepath.Dir(outPath), 0755)
		if err != nil {
			return fmt.Errorf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤: %v", err)
		}

		err = os.WriteFile(outPath, encrypted, 0644)
		if err != nil {
			return fmt.Errorf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª %s: %v", outPath, err)
		}

		filesProcessed++
		totalSize += int64(len(data))
		logVerbose(verbose, "‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω: %s ‚Üí %s", path, outPath)
		return nil
	})

	if err != nil {
		return err
	}

	logVerbose(verbose, "üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: %d | –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç", filesProcessed, totalSize)
	return nil
}
