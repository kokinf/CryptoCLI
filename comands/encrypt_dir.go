package comands

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"time"

	"CruptoCLI/modules"
)

// EncryptDirCommand ‚Äî —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —à–∏—Ñ—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
func EncryptDirCommand(root, output string, key []byte) error {
	start := time.Now()
	fmt.Printf("üîí –ù–∞—á–∏–Ω–∞—é —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ '%s' ‚Üí '%s'\n", root, output)

	err := os.MkdirAll(output, 0755)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}

	filesProcessed := 0
	totalSize := int64(0)

	err = filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() {
			return nil
		}

		rel, _ := filepath.Rel(root, path)
		outputPath := filepath.Join(output, rel+".enc")

		// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
		data, err := ioutil.ReadFile(path)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª %s: %v", path, err)
		}

		// –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
		encrypted := modules.MultiLayerEncrypt(data, key)

		// –ó–∞–ø–∏—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
		err = os.MkdirAll(filepath.Dir(outputPath), 0755)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É—Ç—å %s: %v", outputPath, err)
		}

		err = ioutil.WriteFile(outputPath, encrypted, 0644)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª %s: %v", outputPath, err)
		}

		filesProcessed++
		totalSize += int64(len(data))
		return nil
	})

	if err != nil {
		return err
	}

	fmt.Printf("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω\n")
	fmt.Printf("üìÅ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: %d | –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç\n", filesProcessed, totalSize)
	fmt.Printf("‚è± –í—Ä–µ–º—è: %v\n", time.Since(start))

	return nil
}
