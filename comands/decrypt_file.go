package comands

import (
	"fmt"
	"io/ioutil"
	"os"
	"time"

	"CruptoCLI/modules"
)

// DecryptFileCommand ‚Äî CLI –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
func DecryptFileCommand(input, output string, masterKey []byte, verbose bool) error {
	logVerbose(verbose, "üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞: %s", input)
	data, err := ioutil.ReadFile(input)
	if err != nil {
		return fmt.Errorf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: %v", err)
	}

	logVerbose(verbose, "üîê –î–µ—à–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ")
	start := time.Now()
	decrypted, err := modules.MultiLayerDecrypt(data, masterKey)
	if err != nil {
		return fmt.Errorf("‚ùå –æ—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: %v", err)
	}
	elapsed := time.Since(start)
	speed := float64(len(decrypted)*8) / elapsed.Seconds() / 1_000_000
	logVerbose(verbose, "‚è± –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: %.2f –ú–±–∏—Ç/—Å–µ–∫", speed)

	logVerbose(verbose, "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: %s", output)
	err = os.WriteFile(output, decrypted, 0644)
	if err != nil {
		return fmt.Errorf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª: %v", err)
	}

	logVerbose(verbose, "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω")
	return nil
}
