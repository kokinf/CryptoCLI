package comands

import (
	"fmt"
	"io/ioutil"
	"os"
	"time"

	"CruptoCLI/modules"
)

// EncryptFileCommand ‚Äî CLI –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
func EncryptFileCommand(input, output string, masterKey []byte, verbose bool) error {
	logVerbose(verbose, "üìÑ –ó–∞—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: %s", input)
	data, err := ioutil.ReadFile(input)
	if err != nil {
		return fmt.Errorf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: %v", err)
	}

	logVerbose(verbose, "üîí –®–∏—Ñ—Ä—É–µ–º —á–µ—Ä–µ–∑ –≤—Å–µ —Å–ª–æ–∏")
	start := time.Now()
	encrypted, err := modules.MultiLayerEncrypt(data, masterKey)
	if err != nil {
		return fmt.Errorf("‚ùå –æ—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: %v", err)
	}
	elapsed := time.Since(start)
	speed := float64(len(data)*8) / elapsed.Seconds() / 1_000_000
	logVerbose(verbose, "‚è± –°–∫–æ—Ä–æ—Å—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: %.2f –ú–±–∏—Ç/—Å–µ–∫", speed)

	logVerbose(verbose, "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: %s", output)
	err = os.WriteFile(output, encrypted, 0644)
	if err != nil {
		return fmt.Errorf("‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª: %v", err)
	}

	logVerbose(verbose, "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω")
	return nil
}
