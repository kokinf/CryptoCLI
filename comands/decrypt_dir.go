package comands

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"

	"CruptoCLI/modules"
)

// DecryptDirCommand ‚Äî —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –≤—Å–µ .enc —Ñ–∞–π–ª—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
func DecryptDirCommand(root, output string, masterKey []byte) error {
	fmt.Printf("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: %s ‚Üí %s\n", root, output)

	err := os.MkdirAll(output, 0755)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥: %v", err)
	}

	filesProcessed := 0
	totalSize := int64(0)

	err = filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if info.IsDir() {
			return nil // –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
		}

		if !strings.HasSuffix(path, ".enc") {
			return nil // —Ç–æ–ª—å–∫–æ .enc —Ñ–∞–π–ª—ã
		}

		cipherData, err := ioutil.ReadFile(path)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª %s: %v", path, err)
		}

		plainData, err := modules.MultiLayerDecrypt(cipherData, masterKey)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞ %s: %v", path, err)
		}

		// –£–±–∏—Ä–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
		plainData = RemoveMagic(plainData)

		rel, _ := filepath.Rel(root, path)
		outputPath := filepath.Join(output, strings.TrimSuffix(rel, ".enc"))

		err = os.MkdirAll(filepath.Dir(outputPath), 0755)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤: %v", err)
		}

		err = ioutil.WriteFile(outputPath, plainData, 0644)
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª %s: %v", outputPath, err)
		}

		filesProcessed++
		totalSize += int64(len(plainData))

		fmt.Printf("üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω: %s ‚Üí %s\n", path, outputPath)

		return nil
	})

	if err != nil {
		return err
	}

	fmt.Printf("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω: %s ‚Üí %s\n", root, output)
	fmt.Printf("üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: %d | –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: %d –±–∞–π—Ç\n", filesProcessed, totalSize)

	return nil
}
