package modules

const BlockSizeAES = 16
const KeySizeAES = 16
const RoundsAES = 10

var rcon = [11]byte{
	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
}

// S-BOX (прямая замена)
var sBox = [256]byte{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
	0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
	0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
	0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
	0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
	0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
	0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
	0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
	0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
	0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
	0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
	0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
	0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
	0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
	0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
	0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
	0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
}

// InvSBox — обратный S-BOX (расшифровка)
var invSBox = [256]byte{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
	0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
	0x34, 0x01, 0xc6, 0xdc, 0x20, 0x75, 0x04, 0x4b,
	0x94, 0x32, 0xa6, 0xc2, 0x2b, 0x19, 0xfc, 0x80,
	0x68, 0x2c, 0x0b, 0x7d, 0x2a, 0x1a, 0x6f, 0x59,
	0x17, 0x33, 0x05, 0x7f, 0xa2, 0x35, 0x45, 0x9d,
	0x07, 0x03, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
	0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
	0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
	0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
	0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
	0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
	0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
	0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
	0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
	0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
	0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
	0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
	0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
}

// MixColumns — смешивание столбцов
func MixColumns(state []byte) {
	for c := 0; c < 4; c++ {
		b0 := state[c*4+0]
		b1 := state[c*4+1]
		b2 := state[c*4+2]
		b3 := state[c*4+3]

		state[c*4+0] = mul2(b0) ^ b1 ^ mul2(b1) ^ b2 ^ b3
		state[c*4+1] = b0 ^ mul2(b1) ^ b2 ^ mul2(b2) ^ b3
		state[c*4+2] = b0 ^ b1 ^ mul2(b2) ^ b3 ^ mul2(b3)
		state[c*4+3] = mul2(b0) ^ b1 ^ b2 ^ mul2(b3)
	}
}

// InvMixColumns — обратное смешивание столбцов
func InvMixColumns(state []byte) {
	for c := 0; c < 4; c++ {
		b0 := state[c*4+0]
		b1 := state[c*4+1]
		b2 := state[c*4+2]
		b3 := state[c*4+3]

		state[c*4+0] = mul9[b0] ^ mul11[b1] ^ mul13[b2] ^ mul14[b3]
		state[c*4+1] = mul14[b0] ^ mul9[b1] ^ mul11[b2] ^ mul13[b3]
		state[c*4+2] = mul13[b0] ^ mul14[b1] ^ mul9[b2] ^ mul11[b3]
		state[c*4+3] = mul11[b0] ^ mul13[b1] ^ mul14[b2] ^ mul9[b3]
	}
}

func init() {
	for i := 0; i < 256; i++ {
		b := byte(i)
		mul9[i] = mul2(mul2(mul2(b)^b)) ^ b
		mul11[i] = mul2(mul2(mul2(b) ^ b ^ mul2(b)))
		mul13[i] = mul2(mul2(mul2(b)^b)) ^ mul2(b) ^ b
		mul14[i] = mul2(mul2(mul2(b)^b)) ^ b
	}
}

// KeyExpansion — расширение ключа AES
func KeyExpansion(key []byte) [][4]byte {
	if len(key) != KeySizeAES {
		panic("❌ Неверная длинина ключа")
	}

	keySchedule := make([][4]byte, 4*(RoundsAES+1))
	for i := 0; i < 4; i++ {
		copy(keySchedule[i][:], key[i*4:i*4+4])
	}

	rconIndex := 1
	for i := 4; i < len(keySchedule); i++ {
		temp := keySchedule[i-1]
		if i%4 == 0 {
			temp = [4]byte{temp[1], temp[2], temp[3], temp[0]}
			for j := range temp {
				temp[j] = sBox[temp[j]]
			}
			temp[0] ^= rcon[rconIndex]
			rconIndex++
		}
		for j := 0; j < 4; j++ {
			keySchedule[i][j] = keySchedule[i-4][j] ^ temp[j]
		}
	}

	return keySchedule
}

// AES_EncryptBlock — шифрует один блок AES
func AES_EncryptBlock(block, key []byte) []byte {
	if len(block) != BlockSizeAES {
		panic("❌ Блок должен быть 16 байт")
	}
	if len(key) != KeySizeAES {
		panic("❌ Ключ должен быть 16 байт")
	}

	state := make([]byte, BlockSizeAES)
	copy(state, block)

	keySchedule := KeyExpansion(key)

	AddRoundKey(state, keySchedule[0][:])

	for round := 1; round < RoundsAES; round++ {
		ShiftRows(state)
		MixColumns(state)
		AddRoundKey(state, keySchedule[round][:])
	}

	ShiftRows(state)
	AddRoundKey(state, keySchedule[RoundsAES][:])

	return state
}

// AES_DecryptBlock — расшифровывает один блок AES
func AES_DecryptBlock(block, key []byte) []byte {
	if len(block) != BlockSizeAES {
		panic("❌ Блок должен быть 16 байт")
	}
	if len(key) != KeySizeAES {
		panic("❌ Ключ должен быть 16 байт")
	}

	state := make([]byte, BlockSizeAES)
	copy(state, block)

	keySchedule := KeyExpansion(key)

	AddRoundKey(state, keySchedule[RoundsAES][:])

	for round := RoundsAES - 1; round > 0; round-- {
		InvShiftRows(state)
		AddRoundKey(state, keySchedule[round][:])
		InvMixColumns(state)
	}

	InvShiftRows(state)
	AddRoundKey(state, keySchedule[0][:])

	return state
}

// permutationAES — шифрует несколько блоков через AES
func permutationAES(data []byte, aesKey []byte) []byte {
	if len(aesKey) != KeySizeAES {
		panic("❌ Ключ должен быть 16 байт")
	}

	data = pkcs7Padding(data, BlockSizeAES)

	result := make([]byte, len(data))

	for i := 0; i < len(data); i += BlockSizeAES {
		block := data[i : i+BlockSizeAES]
		encrypted := AES_EncryptBlock(block, aesKey)
		copy(result[i:], encrypted)
	}

	return result
}

// reversePermutationAES — расшифровывает несколько блоков через AES
func reversePermutationAES(data []byte, aesKey []byte) []byte {
	if len(aesKey) != KeySizeAES {
		panic("❌ Ключ должен быть 16 байт")
	}

	if len(data)%BlockSizeAES != 0 {
		data = pkcs7Padding(data, BlockSizeAES)
	}

	result := make([]byte, len(data))

	for i := 0; i < len(data); i += BlockSizeAES {
		block := data[i : i+BlockSizeAES]
		decrypted := AES_DecryptBlock(block, aesKey)
		copy(result[i:], decrypted)
	}

	return result
}
