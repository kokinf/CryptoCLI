package modules

const BlockSizeNUSH = 16
const KeySizeNUSH = 8
const RoundsNUSH = 12

var sBoxNUSH = [256]byte{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
	0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
	0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
	0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
	0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
	0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
	0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
	0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
	0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
	0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
	0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
	0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
	0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
	0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
	0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
	0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
	0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
}

var invSBoxNUSH = [256]byte{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
	0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
	0x34, 0x01, 0xc6, 0xdc, 0x20, 0x75, 0x04, 0x4b,
	0x94, 0x32, 0xa6, 0xc2, 0x2b, 0x19, 0xfc, 0x80,
	0x68, 0x2c, 0x0b, 0x7d, 0x2a, 0x1a, 0x6f, 0x59,
	0x17, 0x33, 0x05, 0x7f, 0xa2, 0x35, 0x45, 0x9d,
	0x07, 0x03, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
	0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
	0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
	0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
	0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
	0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
	0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88,
	0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
	0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
	0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6,
	0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
	0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94,
	0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68,
}

// Сборка 4 слов по 16 бит в 64-битный блок
func combineWordsNUSH(words [4]uint16) []byte {
	block := make([]byte, BlockSizeNUSH)
	for i := 0; i < 4; i++ {
		block[2*i] = byte(words[i] >> 8)
		block[2*i+1] = byte(words[i])
	}
	return block
}

func mul(a, b uint16) uint16 {
	if a == 0 {
		return 0x0001 - b
	}
	if b == 0 {
		return 0x0001 - a
	}

	result := uint32(a) * uint32(b)
	low := result & 0xFFFF
	high := result >> 16
	return uint16(low ^ high)
}

// SubBytesNUSH — замена байтов через S-BOX
func SubBytesNUSH(state []byte) {
	for i := range state {
		state[i] = sBoxNUSH[state[i]]
	}
}

// InvSubBytesNUSH — обратная замена байтов
func InvSubBytesNUSH(state []byte) {
	for i := range state {
		state[i] = invSBoxNUSH[state[i]]
	}
}

func generateRoundKeysNUSH(key []byte) [][4]uint16 {
	keySchedule := make([][4]uint16, RoundsNUSH)
	for r := 0; r < RoundsNUSH; r++ {
		for j := 0; j < 4; j++ {
			keySchedule[r][j] = uint16(key[(r*4+j)%KeySizeNUSH])<<8 | uint16(key[(r*4+j+1)%KeySizeNUSH])
		}
	}
	return keySchedule
}

func nushRound(data [4]uint16, keys [4]uint16) [4]uint16 {
	X1, X2, X3, X4 := data[0], data[1], data[2], data[3]
	K1, K2, K3, K4 := keys[0], keys[1], keys[2], keys[3]

	t1 := mul(X1, K1)
	t2 := add(X2, K2)
	t3 := add(X3, K3)
	t4 := mul(X4, K4)

	t5 := t1 ^ t3
	t6 := t2 ^ t4

	t7 := mul(t5, K1)
	t8 := add(t6, t7)
	t9 := add(t5, t8)

	Y1 := add(X3, t8)
	Y2 := add(X1, t9)
	Y3 := mul(X2, t9)
	Y4 := mul(X4, K4)

	return [4]uint16{Y1, Y2, Y3, Y4}
}

func NUSH_EncryptBlock(block, key []byte) []byte {
	if len(block) != BlockSizeNUSH {
		panic("❌ Неверная длина блока NUSH")
	}
	if len(key) != KeySizeNUSH {
		panic("❌ Неверная длина ключа NUSH")
	}

	state := make([]byte, BlockSizeNUSH)
	copy(state, block)

	state = pkcs7Padding(state, BlockSizeNUSH)

	keySchedule := generateRoundKeysNUSH(key)

	// Основные раунды
	for round := 0; round < RoundsNUSH; round++ {
		keys := keySchedule[round]
		data := splitBlock(state)
		encrypted := nushRound(data, keys)
		state = combineWords(encrypted)
		AddRoundKey(state, key)
	}

	return state
}

func NUSH_DecryptBlock(block, key []byte) []byte {
	if len(block) != BlockSizeNUSH {
		panic("❌ Неверная длина блока NUSH")
	}
	if len(key) != KeySizeNUSH {
		panic("❌ Неверная длина ключа NUSH")
	}

	state := make([]byte, BlockSizeNUSH)
	copy(state, block)

	keySchedule := generateRoundKeysNUSH(key)

	for round := RoundsNUSH - 1; round >= 0; round-- {
		AddRoundKey(state, key)

		keys := keySchedule[round]
		data := splitBlock(state)
		decrypted := nushRound(data, keys)
		state = combineWords(decrypted)
	}

	state, err := pkcs7Unpad(state, BlockSizeNUSH)
	if err != nil {
		panic("❌ Ошибка PKCS#7 unpad при расшифровке NUSH: " + err.Error())
	}

	return state
}

func substitutionNUSH(data []byte, key []byte) []byte {
	if len(key) != KeySizeNUSH {
		panic("❌ Неверная длина ключа NUSH")
	}

	if len(data)%BlockSizeNUSH != 0 {
		data = pkcs7Padding(data, BlockSizeNUSH)
	}

	result := make([]byte, len(data))
	for i := 0; i < len(data); i += BlockSizeNUSH {
		block := data[i : i+BlockSizeNUSH]
		encrypted := NUSH_EncryptBlock(block, key)
		copy(result[i:], encrypted)
	}
	return result
}

func reverseSubstitutionNUSH(data []byte, key []byte) []byte {
	if len(key) != KeySizeNUSH {
		panic("❌ Неверная длина ключа NUSH")
	}

	if len(data)%BlockSizeNUSH != 0 {
		data = pkcs7Padding(data, BlockSizeNUSH)
	}

	result := make([]byte, len(data))
	for i := 0; i < len(data); i += BlockSizeNUSH {
		block := data[i : i+BlockSizeNUSH]
		decrypted := NUSH_DecryptBlock(block, key)
		copy(result[i:], decrypted)
	}
	return result
}
