package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"CruptoCLI/comands"
	"CruptoCLI/key"
)

func getPasswordFromUser() []byte {
	reader := bufio.NewReader(os.Stdin)
	fmt.Print("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
	password, _ := reader.ReadString('\n')
	return []byte(strings.TrimSpace(password))
}

func showUsage() {
	fmt.Fprintf(os.Stderr, "\nüîê CruptoCLI ‚Äî –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–∞—è –∫—Ä–∏–ø—Ç–æ—Å–∏—Å—Ç–µ–º–∞\n")
	fmt.Fprintf(os.Stderr, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n")
	fmt.Fprintf(os.Stderr, "  cryptosystem encrypt file <input> [output] [-v]\n")
	fmt.Fprintf(os.Stderr, "  cryptosystem decrypt file <input> [output] [-v]\n")
	fmt.Fprintf(os.Stderr, "  cryptosystem encrypt dir <input_dir> [output_dir] [-v]\n")
	fmt.Fprintf(os.Stderr, "  cryptosystem decrypt dir <input_dir> [output_dir] [-v]\n")
	fmt.Fprintf(os.Stderr, "\n–ü—Ä–∏–º–µ—Ä—ã:\n")
	fmt.Fprintf(os.Stderr, "  –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª:\n    ./cryptosystem encrypt file secret.txt secret.enc -v\n")
	fmt.Fprintf(os.Stderr, "  –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª:\n    ./cryptosystem decrypt file secret.enc decrypted.txt -v\n")
	fmt.Fprintf(os.Stderr, "  –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥:\n    ./cryptosystem encrypt dir data encrypted_data -v\n")
	fmt.Fprintf(os.Stderr, "  –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥:\n    ./cryptosystem decrypt dir encrypted_data decrypted_data -v\n")
	os.Exit(1)
}

func main() {
	if len(os.Args) < 4 || os.Args[1] == "-h" || os.Args[1] == "--help" {
		showUsage()
		return
	}

	cmd := os.Args[1]
	action := os.Args[2]
	src := os.Args[3]

	var dst string
	if len(os.Args) > 4 {
		dst = os.Args[4]
	} else {
		dst = comands.GetDefaultOutputPath(src)
	}

	password := getPasswordFromUser()

	masterKey := key.GenerateMasterKey(password)

	if len(masterKey) < 32 {
		fmt.Fprintf(os.Stderr, "‚ùå –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π\n")
		os.Exit(1)
	}

	// –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
	switch {
	case cmd == "encrypt" && action == "file":
		err := comands.EncryptFileCommand(src, dst, masterKey, true)
		if err != nil {
			fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
			os.Exit(1)
		}
	case cmd == "decrypt" && action == "file":
		err := comands.DecryptFileCommand(src, dst, masterKey, true)
		if err != nil {
			fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞: %v\n", err)
			os.Exit(1)
		}
	case cmd == "encrypt" && action == "dir":
		err := comands.EncryptDirCommand(src, dst, masterKey, true)
		if err != nil {
			fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞: %v\n", err)
			os.Exit(1)
		}
	case cmd == "decrypt" && action == "dir":
		err := comands.DecryptDirCommand(src, dst, masterKey, true)
		if err != nil {
			fmt.Fprintf(os.Stderr, "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: %v\n", err)
			os.Exit(1)
		}
	default:
		fmt.Fprintf(os.Stderr, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s %s\n", cmd, action)
		showUsage()
	}
}
